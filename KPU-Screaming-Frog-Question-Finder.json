{
  "version": 1,
  "snippets": [
    {
      "version": 1,
      "javascript": "const configuration = {\n  gptSettings: {\n    // Enter your ChatGPT API key here (you can create these at https://platform.openai.com/api-keys )\n    token: 'YOUR_CHATGPT_API_KEY',\n    \n    // which OpenAI model to use we recommend gpt-4-turbo\n    modelIdentifier: 'gpt-4-turbo',\n  },\n  keywordSettings: {\n    // replace with your KeywordsPeopleUse API key created at https://keywordspeopleuse.com/settings\n    userToken: 'YOUR_KEYWORDSPEOPLEUSE_API_KEY',\n    \n    // the language of the website you are crawling e.g. en, de, fr, etc.\n    queryLang: 'en',\n    \n    // the region of the website you are crawling e.g. gb, us, de, fr, etc.\n    queryArea: 'gb',\n  },\n};\n\n// Set mainTitle to the H1 on the page, if not then we look for an H2\n//const mainTitle = document.querySelector('h1') ? document.querySelector('h1').innerText : '';\nconst mainTitle = document.querySelector('h1') ? document.querySelector('h1').innerText : (document.querySelector('h2') ? document.querySelector('h2').innerText : '');\n\n// Check if the main title is present\nif (!mainTitle) {\n  return seoSpider.error('The main title is missing');\n}\n\n// Retrieve questions from the KeywordsPeopleUse API using the main title\nconst retrieveQuestions = new Promise(async (resolve, reject) => {\n  try {\n    const queryURL = `https://keywordspeopleuse.com/api/alsoask?q=${encodeURIComponent(mainTitle)}&hl=${configuration.keywordSettings.queryLang}&gl=${configuration.keywordSettings.queryArea}`;\n    const queryResponse = await fetch(queryURL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Api-Key': configuration.keywordSettings.userToken,\n      },\n    });\n\n    if (!queryResponse.ok) {\n      reject(`Failed to fetch questions: ${queryResponse.statusText}`);\n      return;\n    }\n\n    const queryData = await queryResponse.json();\n\n    if (queryData.error) {\n      reject('Failed to retrieve questions');\n      return;\n    }\n\n    if (!queryData.result || !queryData.result.children || !queryData.result.children.length) {\n      reject(`No questions found for \"${mainTitle}\"`);\n      return;\n    }\n\n    const gatheredQuestions = [];\n\n    queryData.result.children.forEach((entry) => {\n      gatheredQuestions.push(entry.question);\n      entry.children.forEach((subEntry) => {\n        gatheredQuestions.push(subEntry.question);\n      });\n    });\n\n    resolve(gatheredQuestions);\n  } catch (error) {\n    reject(`Error retrieving questions: ${error}`);\n    return;\n  }\n});\n\n// Find unanswered questions using the ChatGPT API\nconst findUnansweredQuestions = (questionArray) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const completionOptions = {\n        model: configuration.gptSettings.modelIdentifier,\n        response_format: { type: 'json_object' },\n        messages: [\n          {\n            role: 'system',\n            content: `Output the questions in this array ${JSON.stringify(\n              questionArray\n            )} where you think the question is not answered in the text content of this page, but where based on the context of the page they would make a good addition to the page. Output the questions that are not answered in a JSON array of strings within an object called unanswered_questions.`,\n          },\n          {\n            role: 'user',\n            content: document.body.textContent,\n          },\n        ],\n      };\n\n      const completionResponse = await fetch(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${configuration.gptSettings.token}`,\n          },\n          body: JSON.stringify(completionOptions),\n        }\n      );\n\n      if (!completionResponse.ok) {\n        reject(`Failed to fetch response: ${completionResponse.statusText}`);\n        return;\n      }\n\n      const responseData = await completionResponse.json();\n      const chatResponse = responseData.choices;\n\n      if (!chatResponse || chatResponse.length === 0) {\n        reject('No response returned from the ChatGPT API');\n        return;\n      }\n\n      const unansweredResponse = chatResponse[0].message.content;\n\n      if (!unansweredResponse) {\n        reject('No response returned from the ChatGPT API');\n        return;\n      }\n\n      const resultObject = JSON.parse(unansweredResponse);\n\n      if (!resultObject.unanswered_questions) {\n        reject('No unanswered questions were identified');\n        return;\n      }\n\n      resolve(resultObject.unanswered_questions);\n    } catch (error) {\n      reject(`Error processing response: ${error}`);\n      return;\n    }\n  });\n};\n\n// Process the questions from the KeywordsPeopleUse API and then find unanswered questions using ChatGPT\nreturn retrieveQuestions\n  .then(findUnansweredQuestions)\n  .then((unresolvedQuestions) => {\n    return seoSpider.data(unresolvedQuestions);\n  })\n  .catch((error) => {\n    return seoSpider.error(error);\n  });",
      "name": "KeywordsPeopleUse.com find unanswered questions (with ChatGPT)",
      "comments": "This snippet uses the KeywordsPeopleUse.com API to find People Also Ask questions related to the main title of the page (H1, or H2 if no H1 available) and then uses ChatGPT to identify which questions are not answered in the text content of the page.",
      "type": "EXTRACTION",
      "actionTimeoutSecs": 1,
      "contentTypes": "text/html"
    }
  ]
}